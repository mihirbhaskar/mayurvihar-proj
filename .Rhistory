library(forcats)
library(ggalluvial)
rm(list = ls())
root <- paste0("D:/Dropbox/TN Dropouts Study/")
graphoutput <- paste0(root,"9_outputs/iti covid analysis/presentation graphs/")
# Import data
clist<-c("_all","_ce","_do","_gr","_male","_fem","_ten","_eight")
for (i in clist){
data_int<-read.csv(paste0(root,"9_outputs/iti covid analysis/csv input/results",i,".csv"))
assign(paste("data",i,sep=""),data_int)
rm(data_int)
}
# Employment status prior to March 23
data_gr$type <- "Graduate"
data_do$type <- "Dropout"
both <- rbind(subset(data_gr, mar23_var == 1 & id == 1),subset(data_do, mar23_var == 1 & id == 1))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
coord_flip()
theme_tufte()
ggsave(paste0(graphoutput,"drop_grad_prelockdown_status.png"), dpi = 600, width = 8, height = 6, units = "in")
# Industries dropouts vs grads pre March 23
both <- rbind(subset(data_gr, mar23_var == 1 & id == 11),subset(data_do, mar23_var == 1 & id == 11))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
coord_flip()
theme_tufte()
ggsave(paste0(graphoutput,"drop_grad_prelockdown_industry.png"), dpi = 600, width = 8, height = 6, units = "in")
# Industry-wise impact on employment (state-level)
data_all$period<- factor(data_all$period,levels = c("Before Lockdown", "During Lockdown (April and May)", "Current Status"))
ggplot(data_all %>% filter(id == 11, period == "Before Lockdown"), aes(x=label, y=estimate, fill=period))+
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label =estimate,y=min95-5),position = position_dodge(0.9),size=2)+
geom_errorbar(aes(x=label,ymin=min95,ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent",fill="Label")+
ylim(0,100)+
theme_tufte()+
coord_flip() +
ggtitle("Distribution of occupations by industry pre-lockdown")
ggsave(paste0(graphoutput,"industry_prelockdown.png"), dpi = 600, width = 8, height = 6, units = "in")
# Broad status transition
recoded <- data_all %>% mutate(period_status_1 = recode(period_status_1, "2 Regular salaried employee in pvt. sector" = "Working",
"3 Regular salaried employee in pub. sector" = "Working",
"1 Household enterprise (self-employed)" = "Working",
"4 Casual wage labour" = "Working"),
period_status_3 = recode(period_status_3, "2 Regular salaried employee in pvt. sector" = "Working",
"3 Regular salaried employee in pub. sector" = "Working",
"1 Household enterprise (self-employed)" = "Working",
"4 Casual wage labour" = "Working"))
ggplot(subset(recoded,id==70),aes(y=estimate,axis1=period_status_1,axis2=period_status_3,fill=period_status_1))+
geom_alluvium(aes(fill=period_status_1),width = 1/12, reverse = FALSE)+
guides(fill = FALSE) +
geom_stratum(width = 1/4, fill = "grey", color = "black",reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE,size=2) +
scale_x_continuous(breaks = 1:2, labels = c("Before Lockdown", "Current Status"))+
labs(x="",y="Frequency")+
scale_fill_brewer(type = "qual", palette = "Set1")+
theme_tufte()
ggsave(paste0(graphoutput,"status_change_fullsample.png"), dpi = 600, width = 8, height = 6, units = "in")
# Continuation of jobs
both <- rbind(subset(data_gr, id == 14),subset(data_do, id == 14))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
theme_tufte()
ggsave(paste0(graphoutput,"jobretention_bytype.png"), dpi = 600, width = 8, height = 6, units = "in")
# Status transition for workers
##data_all %>% filter(id == 70) %>% View()
# Club private + public together as regular salaried employee
recoded <- data_all %>% mutate(period_status_1 = recode(period_status_1, "2 Regular salaried employee in pvt. sector" = "Regular salaried",
"3 Regular salaried employee in pub. sector" = "Regular salaried"),
period_status_3 = recode(period_status_3, "2 Regular salaried employee in pvt. sector" = "Regular salaried",
"3 Regular salaried employee in pub. sector" = "Regular salaried"))
##recoded %>% filter(id == 70) %>% View()
# Neet and attending education instution remove
recoded <- recoded %>% filter(period_status_1 != "5 NEET" & period_status_1 != "6 Attending edu. institution")
ggplot(subset(recoded,id==70),aes(y=estimate,axis1=period_status_1,axis2=period_status_3,fill=period_status_1))+
geom_alluvium(aes(fill=period_status_1),width = 1/12, reverse = FALSE)+
guides(fill = FALSE) +
geom_stratum(width = 1/4, fill = "grey", color = "black",reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE,size=2) +
scale_x_continuous(breaks = 1:2, labels = c("Before Lockdown", "Current Status"))+
labs(x="",y="Frequency")+
scale_fill_brewer(type = "qual", palette = "Set1")+
theme_tufte() +
ggtitle('Status transition for employed')
ggsave(paste0(graphoutput,"employment_sankey.png"), dpi = 600, width = 8, height = 6, units = "in")
library(tidyverse)
library(ggthemes)
library(forcats)
library(ggalluvial)
rm(list = ls())
root <- paste0("D:/Dropbox/TN Dropouts Study/")
graphoutput <- paste0(root,"9_outputs/iti covid analysis/presentation graphs/")
# Import data
clist<-c("_all","_ce","_do","_gr","_male","_fem","_ten","_eight")
for (i in clist){
data_int<-read.csv(paste0(root,"9_outputs/iti covid analysis/csv input/results",i,".csv"))
assign(paste("data",i,sep=""),data_int)
rm(data_int)
}
# Employment status prior to March 23
data_gr$type <- "Graduate"
data_do$type <- "Dropout"
both <- rbind(subset(data_gr, mar23_var == 1 & id == 1),subset(data_do, mar23_var == 1 & id == 1))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
coord_flip() +
theme_tufte()
ggsave(paste0(graphoutput,"drop_grad_prelockdown_status.png"), dpi = 600, width = 8, height = 6, units = "in")
# Industries dropouts vs grads pre March 23
both <- rbind(subset(data_gr, mar23_var == 1 & id == 11),subset(data_do, mar23_var == 1 & id == 11))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
coord_flip() +
theme_tufte()
ggsave(paste0(graphoutput,"drop_grad_prelockdown_industry.png"), dpi = 600, width = 8, height = 6, units = "in")
# Industry-wise impact on employment (state-level)
data_all$period<- factor(data_all$period,levels = c("Before Lockdown", "During Lockdown (April and May)", "Current Status"))
ggplot(data_all %>% filter(id == 11, period == "Before Lockdown"), aes(x=label, y=estimate, fill=period))+
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label =estimate,y=min95-5),position = position_dodge(0.9),size=2)+
geom_errorbar(aes(x=label,ymin=min95,ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent",fill="Label")+
ylim(0,100)+
theme_tufte()+
coord_flip() +
ggtitle("Distribution of occupations by industry pre-lockdown")
ggsave(paste0(graphoutput,"industry_prelockdown.png"), dpi = 600, width = 8, height = 6, units = "in")
# Broad status transition
recoded <- data_all %>% mutate(period_status_1 = recode(period_status_1, "2 Regular salaried employee in pvt. sector" = "Working",
"3 Regular salaried employee in pub. sector" = "Working",
"1 Household enterprise (self-employed)" = "Working",
"4 Casual wage labour" = "Working"),
period_status_3 = recode(period_status_3, "2 Regular salaried employee in pvt. sector" = "Working",
"3 Regular salaried employee in pub. sector" = "Working",
"1 Household enterprise (self-employed)" = "Working",
"4 Casual wage labour" = "Working"))
ggplot(subset(recoded,id==70),aes(y=estimate,axis1=period_status_1,axis2=period_status_3,fill=period_status_1))+
geom_alluvium(aes(fill=period_status_1),width = 1/12, reverse = FALSE)+
guides(fill = FALSE) +
geom_stratum(width = 1/4, fill = "grey", color = "black",reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE,size=2) +
scale_x_continuous(breaks = 1:2, labels = c("Before Lockdown", "Current Status"))+
labs(x="",y="Frequency")+
scale_fill_brewer(type = "qual", palette = "Set1")+
theme_tufte()
ggsave(paste0(graphoutput,"status_change_fullsample.png"), dpi = 600, width = 8, height = 6, units = "in")
# Continuation of jobs
both <- rbind(subset(data_gr, id == 14),subset(data_do, id == 14))
ggplot(both, aes(x = label, y = estimate, fill = type))+
geom_bar(stat="identity", position = position_dodge())+
geom_text(aes(label=estimate,y=min95-5,x=label),position = position_dodge(0.9), size=2)+
geom_errorbar(aes(x=label, ymin=min95, ymax=max95), width=0.4, colour="black",size=0.3,position=position_dodge(0.9))+
labs(x="",y="Percent", fill = "Label")+
ylim(0,100)+
theme_tufte()
ggsave(paste0(graphoutput,"jobretention_bytype.png"), dpi = 600, width = 8, height = 6, units = "in")
# Status transition for workers
##data_all %>% filter(id == 70) %>% View()
# Club private + public together as regular salaried employee
recoded <- data_all %>% mutate(period_status_1 = recode(period_status_1, "2 Regular salaried employee in pvt. sector" = "Regular salaried",
"3 Regular salaried employee in pub. sector" = "Regular salaried"),
period_status_3 = recode(period_status_3, "2 Regular salaried employee in pvt. sector" = "Regular salaried",
"3 Regular salaried employee in pub. sector" = "Regular salaried"))
##recoded %>% filter(id == 70) %>% View()
# Neet and attending education instution remove
recoded <- recoded %>% filter(period_status_1 != "5 NEET" & period_status_1 != "6 Attending edu. institution")
ggplot(subset(recoded,id==70),aes(y=estimate,axis1=period_status_1,axis2=period_status_3,fill=period_status_1))+
geom_alluvium(aes(fill=period_status_1),width = 1/12, reverse = FALSE)+
guides(fill = FALSE) +
geom_stratum(width = 1/4, fill = "grey", color = "black",reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE,size=2) +
scale_x_continuous(breaks = 1:2, labels = c("Before Lockdown", "Current Status"))+
labs(x="",y="Frequency")+
scale_fill_brewer(type = "qual", palette = "Set1")+
theme_tufte() +
ggtitle('Status transition for employed')
ggsave(paste0(graphoutput,"employment_sankey.png"), dpi = 600, width = 8, height = 6, units = "in")
#------- HEADER --------
# Script name: listing_cleaning
# Script purpose: Process and clean the Mayur Vihar listing data
# Script author: Mihir Bhaskar
# Date created: 13/07/2020
# Input files: 'listing_v1_WIDE.csv' - raw survey data as downloaded from the SurveyCTO server
# Summary of actions
# Output files
# Testing github
# Working on the cleaning for
#------ SETUP --------
# Clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require("pacman")) install.packages("pacman") # Pacman package has easy load functions (e.g. installs package and then loads if not available)
pacman::p_load(tidyverse, here, stringr, rgdal, leaflet, RColorBrewer)
# set up paths relative to User's Dropbox
if (Sys.info()[["user"]] == "Mihir_Bhaskar") dbpath <- "D:/"
if (Sys.info()[["user"]] == "Sohaib Nasim") dbpath <- "C:/Users/Sohaib/"
base <- paste0(dbpath,"Dropbox/Mayur Vihar Project/Listing Survey/")
raw <- paste0(base,"Data/Raw/")
# Import raw survey data
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
# Clean out dummy surveys - there may be more, check odd starttimes etc.
clean <- clean[raw$survey_date >= as.Date('2020-07-10') &
raw$surveyor_code != 2 &
raw$phone_num != '2222222222', ]
# Convert bahu to patni on 10th july (patni option wasn't available on this day)
# Flag and convert cases where respondent name = member name but resp relationship is -87 or something else
# Logical checks to clean
## There are two cases in the same HH where respondent relationship is '1'
##
# Collapse the two age variables for each member into one
# One case with 8 hh members and age = 0 for a lot (check for age = 0 as a flag)
# Merge split households into one
# Export prefill list for mosquito net distribution
clean <- clean[raw$survey_date >= as.Date('2020-07-10') &
raw$surveyor_code != 2 &
raw$phone_num != '2222222222', ]
clean <- raw
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
clean <- clean[raw$survey_date >= as.Date('2020-07-10') &
raw$surveyor_code != 2 &
raw$phone_num != '2222222222', ]
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
clean <- clean %>%
filter(survey_date >= as.Date('2020-07-10'), surveyor_code != 2,
phone_num != '2222222222')
clean <- clean %>% mutate(need_net = 0)
clean <- clean %>% mutate(replace(need_net,1,block == 'E'))
clean <- clean %>% mutate(need_net = ifelse(block == 'E', 1, 0))
table(clean$need_net)
colnames(clean)
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = n()) %>%
ungroup()
mutate(hhid = paste0(block, count))
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
View(clean %>% select(block, KEY, hhid))
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = 1:n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
View(clean %>% select(block, KEY, hhid))
# Create unique hhid
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = seq.int(nrow)) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
View(clean %>% select(block, KEY, hhid))
#------- HEADER --------
# Script name: listing_cleaning
# Script purpose: Process and clean the Mayur Vihar listing data
# Script author: Mihir Bhaskar
# Date created: 13/07/2020
# Input files: 'listing_v1_WIDE.csv' - raw survey data as downloaded from the SurveyCTO server
# Summary of actions
# Output files
# Testing github
# Working on the cleaning for
#------ SETUP --------
# Clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require("pacman")) install.packages("pacman") # Pacman package has easy load functions (e.g. installs package and then loads if not available)
pacman::p_load(tidyverse, here, stringr, rgdal, leaflet, RColorBrewer)
# set up paths relative to User's Dropbox
if (Sys.info()[["user"]] == "Mihir_Bhaskar") dbpath <- "D:/"
if (Sys.info()[["user"]] == "Sohaib Nasim") dbpath <- "C:/Users/Sohaib/"
base <- paste0(dbpath,"Dropbox/Mayur Vihar Project/Listing Survey/")
raw <- paste0(base,"Data/Raw/")
# Import raw survey data
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
# Clean out dummy surveys - there may be more, check odd starttimes etc.
clean <- clean %>%
filter(survey_date >= as.Date('2020-07-10'), surveyor_code != 2,
phone_num != '2222222222')
# Create unique hhid
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = 1:n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
# Convert bahu to patni on 10th july (patni option wasn't available on this day)
# Flag and convert cases where respondent name = member name but resp relationship is -87 or something else
# Logical checks to clean
## There are two cases in the same HH where respondent relationship is '1'
##
# Collapse the two age variables for each member into one
# One case with 8 hh members and age = 0 for a lot (check for age = 0 as a flag)
# Merge split households into one
# Export prefill list for mosquito net distribution
clean <- clean %>% mutate(need_net = ifelse(block == 'E', 1, 0))
net_prefill <- clean %>% select(resp_name, resp_father_husband_name, phone_num, hh_size,
name_1, aadhaar_num_1, ration_card_num_1, name_2, aadhaar_num_2,
ration_card_num_2) %>% filter(need_net == 1)
write.csv(net_prefill, paste0(base, 'Mosquito Net Distribution/Beneficiary Prefills/prefill.csv' ))
#------- HEADER --------
# Script name: listing_cleaning
# Script purpose: Process and clean the Mayur Vihar listing data
# Script author: Mihir Bhaskar
# Date created: 13/07/2020
# Input files: 'listing_v1_WIDE.csv' - raw survey data as downloaded from the SurveyCTO server
# Summary of actions
# Output files
# Testing github
# Working on the cleaning for
#------ SETUP --------
# Clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require("pacman")) install.packages("pacman") # Pacman package has easy load functions (e.g. installs package and then loads if not available)
pacman::p_load(tidyverse, here, stringr, rgdal, leaflet, RColorBrewer)
# set up paths relative to User's Dropbox
if (Sys.info()[["user"]] == "Mihir_Bhaskar") dbpath <- "D:/"
if (Sys.info()[["user"]] == "Sohaib Nasim") dbpath <- "C:/Users/Sohaib/"
base <- paste0(dbpath,"Dropbox/Mayur Vihar Project/Listing Survey/")
raw <- paste0(base,"Data/Raw/")
# Import raw survey data
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
# Clean out dummy surveys - there may be more, check odd starttimes etc.
clean <- clean %>%
filter(survey_date >= as.Date('2020-07-10'), surveyor_code != 2,
phone_num != '2222222222')
# Create unique hhid
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = 1:n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
# Convert bahu to patni on 10th july (patni option wasn't available on this day)
# Flag and convert cases where respondent name = member name but resp relationship is -87 or something else
# Logical checks to clean
## There are two cases in the same HH where respondent relationship is '1'
##
# Collapse the two age variables for each member into one
# One case with 8 hh members and age = 0 for a lot (check for age = 0 as a flag)
# Merge split households into one
# Export prefill list for mosquito net distribution
clean <- clean %>% mutate(need_net = ifelse(block == 'E', 1, 0))
net_prefill <- clean %>% filter(need_net == 1) %>% select(resp_name, resp_father_husband_name, phone_num, hh_size,
name_1, aadhaar_num_1, ration_card_num_1, name_2, aadhaar_num_2,
ration_card_num_2)
write.csv(net_prefill, paste0(base, 'Mosquito Net Distribution/Beneficiary Prefills/prefill.csv' ))
#------- HEADER --------
# Script name: listing_cleaning
# Script purpose: Process and clean the Mayur Vihar listing data
# Script author: Mihir Bhaskar
# Date created: 13/07/2020
# Input files: 'listing_v1_WIDE.csv' - raw survey data as downloaded from the SurveyCTO server
# Summary of actions
# Output files
# Testing github
# Working on the cleaning for
#------ SETUP --------
# Clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require("pacman")) install.packages("pacman") # Pacman package has easy load functions (e.g. installs package and then loads if not available)
pacman::p_load(tidyverse, here, stringr, rgdal, leaflet, RColorBrewer)
# set up paths relative to User's Dropbox
if (Sys.info()[["user"]] == "Mihir_Bhaskar") dbpath <- "D:/"
if (Sys.info()[["user"]] == "Sohaib Nasim") dbpath <- "C:/Users/Sohaib/"
base <- paste0(dbpath,"Dropbox/Mayur Vihar Project/")
raw <- paste0(base,"Listing Survey/Data/Raw/")
# Import raw survey data
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
# Clean out dummy surveys - there may be more, check odd starttimes etc.
clean <- clean %>%
filter(survey_date >= as.Date('2020-07-10'), surveyor_code != 2,
phone_num != '2222222222')
# Create unique hhid
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = 1:n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
# Convert bahu to patni on 10th july (patni option wasn't available on this day)
# Flag and convert cases where respondent name = member name but resp relationship is -87 or something else
# Logical checks to clean
## There are two cases in the same HH where respondent relationship is '1'
##
# Collapse the two age variables for each member into one
# One case with 8 hh members and age = 0 for a lot (check for age = 0 as a flag)
# Merge split households into one
# Export prefill list for mosquito net distribution
clean <- clean %>% mutate(need_net = ifelse(block == 'E', 1, 0))
net_prefill <- clean %>% filter(need_net == 1) %>% select(resp_name, resp_father_husband_name, phone_num, hh_size,
name_1, aadhaar_num_1, ration_card_num_1, name_2, aadhaar_num_2,
ration_card_num_2)
write.csv(net_prefill, paste0(base, 'Mosquito Net Distribution/Beneficiary Prefills/prefill.csv' ))
#------- HEADER --------
# Script name: listing_cleaning
# Script purpose: Process and clean the Mayur Vihar listing data
# Script author: Mihir Bhaskar
# Date created: 13/07/2020
# Input files: 'listing_v1_WIDE.csv' - raw survey data as downloaded from the SurveyCTO server
# Summary of actions
# Output files
# Testing github
# Working on the cleaning for
#------ SETUP --------
# Clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require("pacman")) install.packages("pacman") # Pacman package has easy load functions (e.g. installs package and then loads if not available)
pacman::p_load(tidyverse, here, stringr, rgdal, leaflet, RColorBrewer)
# set up paths relative to User's Dropbox
if (Sys.info()[["user"]] == "Mihir_Bhaskar") dbpath <- "D:/"
if (Sys.info()[["user"]] == "Sohaib Nasim") dbpath <- "C:/Users/Sohaib/"
base <- paste0(dbpath,"Dropbox/Mayur Vihar Project/")
raw <- paste0(base,"Listing Survey/Data/Raw/")
# Import raw survey data
raw <- read.csv(paste0(raw,'listing_v1_WIDE.csv'))
clean <- raw
#----- CLEANING ------
# Format dates
clean$survey_date <- as.Date(raw$starttime, '%B %d, %Y')
# Clean out dummy surveys - there may be more, check odd starttimes etc.
clean <- clean %>%
filter(survey_date >= as.Date('2020-07-10'), surveyor_code != 2,
phone_num != '2222222222')
# Create unique hhid
clean <- clean %>% arrange(block, KEY) %>%
group_by(block) %>% mutate(count = 1:n()) %>%
ungroup() %>%
mutate(hhid = paste0(block, count))
# Convert bahu to patni on 10th july (patni option wasn't available on this day)
# Flag and convert cases where respondent name = member name but resp relationship is -87 or something else
# Logical checks to clean
## There are two cases in the same HH where respondent relationship is '1'
##
# Collapse the two age variables for each member into one
# One case with 8 hh members and age = 0 for a lot (check for age = 0 as a flag)
# Merge split households into one
# Export prefill list for mosquito net distribution
clean <- clean %>% mutate(need_net = ifelse(block == 'E', 1, 0))
net_prefill <- clean %>% filter(need_net == 1) %>% select(hhid, resp_name, resp_father_husband_name, phone_num, hh_size,
name_1, aadhaar_num_1, ration_card_num_1, name_2, aadhaar_num_2,
ration_card_num_2)
write.csv(net_prefill, paste0(base, 'Mosquito Net Distribution/Beneficiary Prefills/prefill.csv' ))
library(tidyverse)
library(ggthemes)
library(forcats)
library(ggalluvial)
rm(list = ls())
root <- paste0("D:/Dropbox/TN Dropouts Study/")
graphoutput <- paste0(root,"9_outputs/iti covid analysis/presentation graphs/")
# Import data
clist<-c("_all","_ce","_do","_gr","_male","_fem","_ten","_eight")
for (i in clist){
data_int<-read.csv(paste0(root,"9_outputs/iti covid analysis/csv input/results",i,".csv"))
assign(paste("data",i,sep=""),data_int)
rm(data_int)
}
View(data_all)
View(data_all)
View(data_fem)
View(subset(data_fem,id==60))
View(subset(data_all,id==11))
View(data_do)
data_gr$type <- "Graduate"
data_do$type <- "Dropout"
both <- rbind(subset(data_gr, mar23_var == 1 & id == 1),subset(data_do, mar23_var == 1 & id == 1))
View(both)
View(data_all %>% filter(id == 70))
View(subset(data_all, id == 70))
data_all %>% filter(id == 70)
data_all %>% filter(id == 70) %>% View()
rm(list = ls())
